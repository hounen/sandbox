[
  {
    "word": "number",
    "hint": "数値を表す基本的な型"
  },
  {
    "word": "string",
    "hint": "文字列を表す基本的な型"
  },
  {
    "word": "type",
    "hint": "データの種類、値の集合を表す概念"
  },
  {
    "word": "annotation",
    "hint": "変数や関数に型を明示的に指定する方法"
  },
  {
    "word": "boolean",
    "hint": "真偽値（trueまたはfalse）を表す型"
  },
  {
    "word": "literal",
    "hint": "具体的な文字列や数値を示す型"
  },
  {
    "word": "union",
    "hint": "2つ以上の型を、「|」で組み合わせて、1つの型として扱う操作・型"
  },
  {
    "word": "typealias",
    "hint": "既存の型に新しい名前を付けること"
  },
  {
    "word": "readonly",
    "hint": "プロパティが読み取り専用であることを指定する修飾子"
  },
  {
    "word": "optional",
    "hint": "プロパティやパラメータが必須でないことを示す記法"
  },
  {
    "word": "any",
    "hint": "型が何であってもよいことを表す型"
  },
  {
    "word": "tsc",
    "hint": "TypeScriptのコンパイラのコマンドラインツール"
  },
  {
    "word": "interface",
    "hint": "オブジェクトの型を定義するためのキーワード"
  },
  {
    "word": "assertion",
    "hint": "値の型を上書きするための記法"
  },
  {
    "word": "inference",
    "hint": "コンパイラが自動で型を推定すること"
  },
  {
    "word": "null",
    "hint": "値が存在しないことを表す型"
  },
  {
    "word": "undefined",
    "hint": "値が未定義であることを表す型"
  },
  {
    "word": "typeof",
    "hint": "変数や値の型を取得する演算子"
  },
  {
    "word": "never",
    "hint": "値が決して存在しないことを表す型"
  },
  {
    "word": "extends",
    "hint": "クラスが別のクラスを継承するためのキーワード"
  },
  {
    "word": "overloads",
    "hint": "同名の関数やメソッドを異なるシグニチャで複数定義すること"
  },
  {
    "word": "class",
    "hint": "オブジェクトの雛形を定義するためのキーワード"
  },
  {
    "word": "unknown",
    "hint": "anyより安全な代替物となる型"
  },
  {
    "word": "void",
    "hint": "関数が値を返さないことを表す型"
  },
  {
    "word": "intersection",
    "hint": "2つ以上の型を、「&」によって1つに結合する操作、型"
  },
  {
    "word": "generics",
    "hint": "型をパラメータとして持つことができる機能"
  },
  {
    "word": "tuple",
    "hint": "固定数の要素を持つ配列の型"
  },
  {
    "word": "array",
    "hint": "複数の値を順序付きで持つオブジェクトの型"
  },
  {
    "word": "keyof",
    "hint": "オブジェクトのキーの型を取得するキーワード"
  },
  {
    "word": "decorator",
    "hint": "クラスやクラスのメンバーを修飾して機能を追加するための構文"
  },
  {
    "word": "getter",
    "hint": "クラス内のプロパティの値を取得するためのメソッド"
  },
  {
    "word": "setter",
    "hint": "クラス内のプロパティの値を設定するためのメソッド"
  },
  {
    "word": "public",
    "hint": "メンバーが外部からアクセス可能であることを指定する修飾子"
  },
  {
    "word": "private",
    "hint": "メンバーがクラス内からのみアクセス可能であることを指定する修飾子"
  },
  {
    "word": "protected",
    "hint": "メンバーがクラスおよびサブクラスからアクセス可能であることを指定する修飾子"
  },
  {
    "word": "static",
    "hint": "メンバーがクラスレベルでアクセス可能であることを指定する修飾子"
  },
  {
    "word": "typeguard",
    "hint": "特定の型が期待通りであることを実行時に保証する記法"
  },
  {
    "word": "implements",
    "hint": "クラスが特定のインターフェイスを実装していることを宣言するキーワード"
  },
  {
    "word": "module",
    "hint": "コードの再利用性を高め、保守性を向上させるための方法の1つ。分割されたファイル"
  },
  {
    "word": "utilitytype",
    "hint": "既存の型を変換するための組み込みのジェネリック型"
  },
  {
    "word": "partial",
    "hint": "すべてのプロパティをオプショナルにするユーティリティ型"
  },
  {
    "word": "primitive",
    "hint": "number, string, booleanなどの基本的な型"
  },
  {
    "word": "declarationfile",
    "hint": "コンパイラに型情報を提供する役割を持つファイル。"
  },
  {
    "word": "noimplicitany",
    "hint": "型が明示的に指定されていない場合に暗黙的にany型になることを許可しないコンパイラオプション"
  },
  {
    "word": "noimplicitthis",
    "hint": "thisの型が暗黙的にanyになるのを防ぐコンパイラオプション"
  },
  {
    "word": "noemit",
    "hint": "エラーがあっても出力ファイルを生成するのを防ぐコンパイラオプション"
  },
  {
    "word": "noemitonerror",
    "hint": "エラーがある場合、出力ファイルを生成しないコンパイラオプション"
  },
  {
    "word": "strictnullchecks",
    "hint": "nullとundefinedを厳格にチェックするコンパイラオプション"
  },
  {
    "word": "allowjs",
    "hint": "JavaScriptファイルのコンパイルを許可するコンパイラオプション"
  },
  {
    "word": "checkjs",
    "hint": "JavaScriptファイルに対して型チェックを行うコンパイラオプション"
  }
]
